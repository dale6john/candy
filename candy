#!/usr/bin/perl -w
use strict;
use POSIX qw/floor/;
use Getopt::Long;
use Data::Dumper qw/Dumper/;

my $verbose = 0;
my $input = "";
my $quiet = 0;
my $debug = 0;
my $help = 0;
my $showLong = 0;
my $program = "";
my $programFile = "";

GetOptions("verbose|v" => \$verbose,
           "debug|d" => \$debug,
           "quiet|q" => \$quiet,
           "help|?" => \$help,
           "long|L" => \$showLong,
           "file|f=s" => \$programFile,
           "execute|e=s" => \$program,
           "input|i=s" => \$input)
or die ("error in arguments");

if ($help) {
  print "Usage: $0
   -v --verbose
   -q --quiet
   -d --debug
   -? --help
   -L --long
   -f --file <name>
   -e --execute 'inline-program'
   -i --input <comma separated numbers>
   \n";
  exit(2);
}

# remaining args to be program

if (@ARGV) {
  die if $programFile;
  $programFile = shift;
}

my $pc = 0;
my $ops = 0;
my $stop = 0;
my $loops = [];
my $ifs = [];
my $labels = {};
my $labelsAt = {};
my $subStack = [];

my ($A, $X, $Y, $Z) = (0,0,0,0);
my $sp = 0;
my $st = [ [], [], [] ];
my @prog = ();

sub pop1 {
  if (scalar @{$st->[$sp]}) {
    return pop @{$st->[$sp]};
  }
  my $c = $prog[$pc];
  die "stack underflow at $pc '$c' (stack $sp)\n";
}
sub push1 {
  my $arg = shift;
  push @{$st->[$sp]}, $arg;
}

my $operations = [
  [ "println", "?", sub { print pop1(); print "\n" }],
  [ "print",  "p", sub { printf "...%s\t", pop1() }],
  [ "printChr", ";", sub { printf "%c", pop1() }],
  [ "peekA", "~", sub { $A=pop1(); push1($A) }],
  [ "popA",  "=", sub { $A=pop1() } ],
  [ "pushA", "A", sub { push1($A) } ],
  [ "pushX", "X", sub { push1($X) } ],
  [ "pushY", "Y", sub { push1($Y) } ],
  [ "pushZ", "Z", sub { push1($Z) } ],
  [ "digit0", "0", sub { push1(0) } ],
  [ "digit1", "1", sub { push1(1) } ],
  [ "digit2", "2", sub { push1(2) } ],
  [ "digit3", "3", sub { push1(3) } ],
  [ "digit4", "4", sub { push1(4) } ],
  [ "digit5", "5", sub { push1(5) } ],
  [ "digit6", "6", sub { push1(6) } ],
  [ "digit7", "7", sub { push1(7) } ],
  [ "digit8", "8", sub { push1(8) } ],
  [ "digit9", "9", sub { push1(9) } ],
  [ "number", "#", sub {
    my $v = 0;
    my $op = $prog[$pc + ++$ops];
    while ($op ge "0" && $op le "9") {
      $v = $v * 10 + $op;
      $op = $prog[$pc + ++$ops];
    }
    --$ops;
    push1($v);
  }],
  [ "quote", '"', sub {
    my @s = ();
    while ($prog[$pc + ++$ops] ne q{"}) {
      if ($prog[$pc + $ops] eq '\\') {
        $ops++;
        if ($prog[$pc + $ops] eq "n") {
          push @s, "\n";
        } elsif ($prog[$pc + $ops] eq "t") {
          push @s, "\t";
        }
      } else {
        push @s, $prog[$pc + $ops];
      }
    }
    #push1(0); # null terminator
    for (reverse(@s)) {
      push1(ord($_));
    }
  }],
  [ "XGetsA", "x", sub { $X=$A } ],
  [ "YGetsA", "y", sub { $Y=$A } ],
  [ "ZGetsA", "z", sub { $Z=$A } ],
  [ "incrZ",  "i", sub { $Z++ } ],
  [ "decrZ",  "d", sub { $Z-- } ],
  [ "popAddZ", "h", sub { $Z+=pop1() }],
  [ "dupl",   "D", sub { my $t=pop1(); push1($t); push1($t) }],
  [ "negate", "m", sub { push1(-pop1()) }],
  [ "not",    "n", sub { push1(pop1() ? 0 : 1) }],
  [ "root",   "r", sub { push1(sqrt(pop1())) }],
  [ "sqr",    "s", sub { my $t=pop1(); push1($t*$t) }],
  [ "floor",  "L", sub { push1(POSIX::floor(pop1())) }],
  [ "equal",  "e", sub { push1((pop1()==pop1())?1:0) }],
  [ "add",  "+", sub { push1(pop1()+pop1()) }],
  [ "sub",  "-", sub { push1(-pop1()+pop1()) }],
  [ "mult",  "*", sub { push1(pop1()*pop1()) }],
  [ "div",  "/", sub { push1(1/pop1()*pop1()) }],
  [ "mod",  "%", sub { my $t=pop1(); push1(pop1() % $t) }],
  [ "swap",  "W", sub { my $t=pop1(); my $t2=pop1(); push1($t); push1($t2) }],
  [ "rangeP",  "O", sub {
    my $t2=pop1();
    my $t1=pop1();
    for (reverse($t1 .. $t2)) {
      push1($_);
    }
  }],
  [ "range0",  "_", sub { for (reverse(0..pop1()-1)) { push1($_) }}],
  [ "range1",  "R", sub { for (reverse(1..pop1())) { push1($_) }}],
  [ "range2",  "T", sub {
    my $t = pop1();
    for (reverse(-$t .. $t)) {
      push1($_)
    }
  }],
  [ "sum",    "S", sub { 
    my $t=0;
    for (@{$st->[$sp]}) {
      $t+=$_;
    }
    $st->[$sp] = [$t];
  }],
  [ "prod",   "P", sub {
    my $t=1;
    for (@{$st->[$sp]}) {
      $t*=$_;
    }
    $st->[$sp] = [$t];
  }],
  [ "stackSz", "&", sub { $st->[$sp] = [ scalar @{$st->[$sp]} ]}],
  [ "cart",   "C", sub {
    # cartesian product
    #my $op = $prog[$pc + ++$ops];
    my $sp2 = pop1();
    #my $sp2 = ord($op) - ord("a");
    my @newlist = ();
    for my $a (@{$st->[$sp]}) {
      for my $b (@{$st->[$sp2]}) {
        push @newlist, $a;
        push @newlist, $b;
      }
    }
    $st->[$sp2] = [];
    $st->[$sp] = \@newlist;
  }],
  [ "stack1", "a", sub { $sp=0 }],
  [ "stack2", "b", sub { $sp=1 }],
  [ "stack3", "c", sub { $sp=2 }],
  [ "getSP", "K", sub { push1($sp); } ],
  [ "setSP", "k", sub { $sp=pop1(); } ],
  [ "if",     "{", sub {
    my $tmp = pop1();
    if (!$tmp) {
      # when false we need to scan to either
      # the next | or close curly, but honor
      # nested ifs
      my $nesting = 0;
      while ($nesting >= 0) {
        my $op = $prog[$pc + ++$ops];
        $nesting++ if ($op eq "{");
        $nesting-- if ($op eq "}");
        if ($op eq "|" && $nesting == 0) {
          last;
        }
      }
    }
  }],
  [ "else",   "|", sub {
    # we've hit an else, scan to the next
    # unmatched close curly
    my $nesting = 0;
    while ($nesting >= 0) {
      my $op = $prog[$pc + ++$ops];
      $nesting++ if ($op eq "{");
      $nesting-- if ($op eq "}");
    }
  }],
  [ "endif",  "}", sub {} ],
  [ "while",  "(", sub { push @$loops, [ $pc, $sp ] }],
  [ "endwhile", ")", sub {
    my $lp = pop @$loops;
    my $this_pc = $lp->[0];
    my $this_sp = $lp->[1];
    if (scalar @{$st->[$this_sp]}) {
      $pc = $this_pc;
      $sp = $this_sp;
      push @$loops, $lp;
    } else {
      $sp = $this_sp;
    }
  }],
  [ "label", "@", sub {
    # need to skip past next number defn
    $ops = $labelsAt->{$pc} || die;
  }],
  [ "jumpSub", "j", sub {
    push @$subStack, [ $pc, $sp ];
    my $label = pop1();
    $pc = $labels->{ $label };
    die "label [$label] not found" unless defined $pc;
  }],
  [ "retSub", ".", sub {
    my $p = pop @$subStack;
    if ($p) {
      $pc = $p->[0];
      $sp = $p->[1];
    } else {
      $stop = 1;
    }
  }],
  [ "noOp",   " ", sub {} ],
];

if ($program eq "--operations") {
  for (@$operations) {
    print $_->[1] . "\t" . $_->[0] . "\n";
  }
  exit(0);
}

my $instructions = {};
my $long = {};
for (@$operations) {
  $instructions->{$_->[1]} = $_;
  $long->{lc($_->[0])} = $_;
}
sub isOp {
  my $input = shift;
  my $check = shift;
  $instructions->{$input}->[0] eq $check;
}

# if long form given, condense to short form
if ($programFile) {
  open(F, "<$programFile");
  while(<F>) {
    #print;
    next if /^\s*#/;
    # quoted strings are required to be on their own line
    if (/^\s*"([^"]+)"/) {
      $program .= qq{"$1"};
    } else {
      s/#[^"]*$//;
      for my $w (split(/\s+/)) {
        next if $w =~ /^\s*$/;
        #print "word: '$w'\n";
        my $c = $long->{lc($w)}->[1];
        #print "c: '$c'\n";
        die "illegal: '$w'" unless defined $c;
        $program .= $c;
      }
    }
  }
  if ($verbose) {
    for (0..length($program)) {
      printf "%d", int($_ / 10);
    }
    print "\n";
    for (0..length($program)) {
      printf "%d", $_ % 10;
    }
    print "\n";
    print "$program\n";
  }
}

@prog = split(//, $program);
printf STDERR "program length: %d\n", scalar @prog unless $quiet;

if ($showLong) {
  my $indent = 0;
  my $each = 2;
  my $ix = 0;
  while ($ix < length($program)) {
    my $c = $prog[$ix];
    $indent -= $each if $c eq ")" || $c eq "}";
    if ($c eq q{"}) {
      # get next quote
      for my $b ($ix + 1 .. length($program) - 1) {
        if ($prog[$b] eq q{"}) {
          my $str = substr($program, $ix + 1, $b - $ix - 1);
          print ((" " x $indent) . qq{"$str"\n});
          $ix += $b - $ix - 1;
          last;
        }
      }
    } else {
      my $o = $instructions->{$c};
      print ((" " x $indent) . $o->[0] . "\n");
      print "\n" if ($c eq ".");
    }
    $indent += $each if $c eq "(" || $c eq "{";
    $ix++;
  }
  exit(0);
}

# scan for labels
for my $ix (0 .. scalar(@prog) - 1) {
  my $c = $prog[$ix];
  if ($c eq "@") {
    $ops = 0;
    $pc = $ix + 1;
    $c = $prog[$pc];
    eval {
      $instructions->{$c}->[2]();
    };
    if ($@) {
       die "at '$c' $@ $!\n";
    }
    my $num = pop1();
    my $next = $ops;
    $labels->{ $num } = $pc + $ops;
    $labelsAt->{ $ix } = $ops;
  }
}
#print Dumper($labels);
#print Dumper($labelsAt);
$pc = 0;
$sp = 0;
$st->[$sp] = [];

# parameters
if ($input ne "") {
  for (split(/,/, $input)) {
    push1($_);
  }
}

#
# execute
#
while (1) {
  my $c = $prog[$pc];
  $ops = 0;
  if ($stop || $pc >= scalar @prog) {
    if (scalar @{$st->[$sp]} == 1) {
      print ">>>\t";
      print pop1();
      print "\n";
    }
    last;
  }
  if ($debug) {
    printf "pc: %d [%s]  sp: %d  A: %f  X: %f  Y: %f  Z: %f  ss:%d %d %d\n",
      $pc, $c, $sp, $A, $X, $Y, $Z, 
      (scalar @{$st->[0]}),
      (scalar @{$st->[1]}),
      (scalar @{$st->[2]})
      ;
  }

  eval {
     $instructions->{$c}->[2]();
  };
  if ($@) {
     die "at '$c' $@ $!\n";
  }
  $pc += 1 + $ops;
  next;
}
